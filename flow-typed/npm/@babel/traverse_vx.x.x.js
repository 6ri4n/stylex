// flow-typed signature: ceae51a8d28de53f96291e9756cf9eff
// flow-typed version: <<STUB>>/@babel/traverse_v^7.0.0-0/flow_v0.162.1
// @flow

/**
 * This is an autogenerated libdef stub for:
 *
 *   '@babel/traverse'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

// $FlowExpectedError(toplevel-library-import)
import * as t from '@babel/types';

// type t = $Exports<'@babel/types'>;

declare module '@babel/traverse' {
  declare type TWrapWithNodePath = (<+T: Node>(node: T) => NodePath<T>) &
    (<+T: Node>(node: $ReadOnlyArray<T>) => $ReadOnlyArray<NodePath<T>>);
  // Type definitions for babel-traverse 6.25
  // Project: https://github.com/babel/babel/tree/master/packages/babel-traverse, https://babeljs.io
  // Definitions by: Troy Gerwien <https://github.com/yortus>
  //                 Marvin Hagemeister <https://github.com/marvinhagemeister>
  //                 Ryan Petrich <https://github.com/rpetrich>
  // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
  // TypeScript Version: 2.8

  // $FlowExpectedError(value-as-type)
  declare export type Node = t.Node;

  declare export type TraverseOptions<S = Node> = {
    ...Visitor<S>,
    scope?: Scope,
    noScope?: boolean,
  };

  declare export class Scope {
    //constructor(path: NodePath, parentScope?: Scope)

    path: NodePath<>;
    block: Node;
    parentBlock: Node;
    parent: Scope;
    hub: Hub;
    bindings: { [name: string]: Binding };

    /** Traverse node with current scope and path. */
    traverse<S>(
      node: Node | $ReadOnlyArray<Node>,
      opts: TraverseOptions<S>,
      state: S
    ): void;

    /** Generate a unique identifier and add it to the current scope. */
    // $FlowExpectedError(value-as-type)
    generateDeclaredUidIdentifier(name?: string): t.Identifier;

    /** Generate a unique identifier. */

    // $FlowExpectedError(value-as-type)
    generateUidIdentifier(name?: string): t.Identifier;

    /** Generate a unique `_id1` binding. */
    generateUid(name?: string): string;

    /** Generate a unique identifier based on a node. */
    generateUidIdentifierBasedOnNode(
      parent: Node,
      defaultName?: string
      // $FlowExpectedError(value-as-type)
    ): t.Identifier;

    /**
     * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
     * evaluating it wont result in potentially arbitrary code from being ran. The following are
     * whitelisted and determined not to cause side effects:
     *
     *  - `this` expressions
     *  - `super` expressions
     *  - Bound identifiers
     */
    isStatic(node: Node): boolean;

    /** Possibly generate a memoised identifier if it is not static and has consequences. */
    // $FlowExpectedError(value-as-type)
    maybeGenerateMemoised(node: Node, dontPush?: boolean): t.Identifier;

    checkBlockScopedCollisions(
      local: Node,
      kind: string,
      name: string,
      id: any
    ): void;

    rename(oldName: string, newName?: string, block?: Node): void;

    dump(): void;

    toArray(node: Node, i?: number): Node;

    registerDeclaration(path: NodePath<>): void;

    buildUndefinedNode(): Node;

    registerConstantViolation(path: NodePath<>): void;

    registerBinding(
      kind: string,
      path: NodePath<>,
      bindingPath?: NodePath<>
    ): void;

    addGlobal(node: Node): void;

    hasUid(name: string): boolean;

    hasGlobal(name: string): boolean;

    hasReference(name: string): boolean;

    isPure(node: Node, constantsOnly?: boolean): boolean;

    setData(key: string, val: any): any;

    getData(key: string): any;

    removeData(key: string): void;

    push(opts: any): void;

    getProgramParent(): Scope;

    getFunctionParent(): Scope;

    getBlockParent(): Scope;

    /** Walks the scope tree and gathers **all** bindings. */
    getAllBindings(...kinds: $ReadOnlyArray<string>): any;

    bindingIdentifierEquals(name: string, node: Node): boolean;

    getBinding(name: string): Binding | void;

    getOwnBinding(name: string): Binding | void;
    // $FlowExpectedError(value-as-type)
    getBindingIdentifier(name: string): t.Identifier;
    // $FlowExpectedError(value-as-type)
    getOwnBindingIdentifier(name: string): t.Identifier;

    hasOwnBinding(name: string): boolean;

    hasBinding(name: string, noGlobals?: boolean): boolean;

    parentHasBinding(name: string, noGlobals?: boolean): boolean;

    /** Move a binding of `name` to another `scope`. */
    moveBindingTo(name: string, scope: Scope): void;

    removeOwnBinding(name: string): void;

    removeBinding(name: string): void;
  }

  declare export class Binding {
    // constructor(opts: { existing: Binding, identifier: t.Identifier, scope: Scope, path: NodePath<>, kind: 'var' | 'let' | 'const', });
    // $FlowExpectedError(value-as-type)
    identifier: t.Identifier;
    scope: Scope;
    path: NodePath<>;
    kind: 'var' | 'let' | 'const' | 'module';
    referenced: boolean;
    references: number;
    referencePaths: $ReadOnlyArray<NodePath<>>;
    constant: boolean;
    constantViolations: $ReadOnlyArray<NodePath<>>;
  }

  // The Visitor has to be generic because babel binds `this` for each property.
  // `this` is usually used in babel plugins to pass plugin state from
  // `pre` -> `visitor` -> `post`. An example of this can be seen in the official
  // babel handbook:
  // https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md#-pre-and-post-in-plugins
  declare export type Visitor<S = Node> = {
    ...VisitNodeObject<Node>,
    // $FlowExpectedError(value-as-type)
    ArrayExpression?: VisitNode<S, t.ArrayExpression>,
    // $FlowExpectedError(value-as-type)
    AssignmentExpression?: VisitNode<S, t.AssignmentExpression>,
    // $FlowExpectedError(value-as-type)
    LVal?: VisitNode<S, t.LVal>,
    // $FlowExpectedError(value-as-type)
    Expression?: VisitNode<S, t.Expression>,
    // $FlowExpectedError(value-as-type)
    BinaryExpression?: VisitNode<S, t.BinaryExpression>,
    // $FlowExpectedError(value-as-type)
    Directive?: VisitNode<S, t.Directive>,
    // $FlowExpectedError(value-as-type)
    DirectiveLiteral?: VisitNode<S, t.DirectiveLiteral>,
    // $FlowExpectedError(value-as-type)
    BlockStatement?: VisitNode<S, t.BlockStatement>,
    // $FlowExpectedError(value-as-type)
    BreakStatement?: VisitNode<S, t.BreakStatement>,
    // $FlowExpectedError(value-as-type)
    Identifier?: VisitNode<S, t.Identifier>,
    // $FlowExpectedError(value-as-type)
    CallExpression?: VisitNode<S, t.CallExpression>,
    // $FlowExpectedError(value-as-type)
    CatchClause?: VisitNode<S, t.CatchClause>,
    // $FlowExpectedError(value-as-type)
    ConditionalExpression?: VisitNode<S, t.ConditionalExpression>,
    // $FlowExpectedError(value-as-type)
    ContinueStatement?: VisitNode<S, t.ContinueStatement>,
    // $FlowExpectedError(value-as-type)
    DebuggerStatement?: VisitNode<S, t.DebuggerStatement>,
    // $FlowExpectedError(value-as-type)
    // $FlowExpectedError(value-as-type)
    DoWhileStatement?: VisitNode<S, t.DoWhileStatement>,
    // $FlowExpectedError(value-as-type)
    Statement?: VisitNode<S, t.Statement>,
    // $FlowExpectedError(value-as-type)
    EmptyStatement?: VisitNode<S, t.EmptyStatement>,
    // $FlowExpectedError(value-as-type)
    ExpressionStatement?: VisitNode<S, t.ExpressionStatement>,
    // $FlowExpectedError(value-as-type)
    File?: VisitNode<S, t.File>,
    // $FlowExpectedError(value-as-type)
    Program?: VisitNode<S, t.Program>,
    // $FlowExpectedError(value-as-type)
    ForInStatement?: VisitNode<S, t.ForInStatement>,
    // $FlowExpectedError(value-as-type)
    VariableDeclaration?: VisitNode<S, t.VariableDeclaration>,
    // $FlowExpectedError(value-as-type)
    ForStatement?: VisitNode<S, t.ForStatement>,
    // $FlowExpectedError(value-as-type)
    FunctionDeclaration?: VisitNode<S, t.FunctionDeclaration>,
    // $FlowExpectedError(value-as-type)
    FunctionExpression?: VisitNode<S, t.FunctionExpression>,
    // $FlowExpectedError(value-as-type)
    IfStatement?: VisitNode<S, t.IfStatement>,
    // $FlowExpectedError(value-as-type)
    LabeledStatement?: VisitNode<S, t.LabeledStatement>,
    // $FlowExpectedError(value-as-type)
    StringLiteral?: VisitNode<S, t.StringLiteral>,
    // $FlowExpectedError(value-as-type)
    NumericLiteral?: VisitNode<S, t.NumericLiteral>,
    // $FlowExpectedError(value-as-type)
    NullLiteral?: VisitNode<S, t.NullLiteral>,
    // $FlowExpectedError(value-as-type)
    BooleanLiteral?: VisitNode<S, t.BooleanLiteral>,
    // $FlowExpectedError(value-as-type)
    RegExpLiteral?: VisitNode<S, t.RegExpLiteral>,
    // $FlowExpectedError(value-as-type)
    LogicalExpression?: VisitNode<S, t.LogicalExpression>,
    // $FlowExpectedError(value-as-type)
    MemberExpression?: VisitNode<S, t.MemberExpression>,
    // $FlowExpectedError(value-as-type)
    NewExpression?: VisitNode<S, t.NewExpression>,
    // $FlowExpectedError(value-as-type)
    ObjectExpression?: VisitNode<S, t.ObjectExpression>,
    // $FlowExpectedError(value-as-type)
    ObjectMethod?: VisitNode<S, t.ObjectMethod>,
    // $FlowExpectedError(value-as-type)
    ObjectProperty?: VisitNode<S, t.ObjectProperty>,
    // $FlowExpectedError(value-as-type)
    RestElement?: VisitNode<S, t.RestElement>,
    // $FlowExpectedError(value-as-type)
    ReturnStatement?: VisitNode<S, t.ReturnStatement>,
    // $FlowExpectedError(value-as-type)
    SequenceExpression?: VisitNode<S, t.SequenceExpression>,
    // $FlowExpectedError(value-as-type)
    SwitchCase?: VisitNode<S, t.SwitchCase>,
    // $FlowExpectedError(value-as-type)
    SwitchStatement?: VisitNode<S, t.SwitchStatement>,
    // $FlowExpectedError(value-as-type)
    ThisExpression?: VisitNode<S, t.ThisExpression>,
    // $FlowExpectedError(value-as-type)
    ThrowStatement?: VisitNode<S, t.ThrowStatement>,
    // $FlowExpectedError(value-as-type)
    TryStatement?: VisitNode<S, t.TryStatement>,
    // $FlowExpectedError(value-as-type)
    UnaryExpression?: VisitNode<S, t.UnaryExpression>,
    // $FlowExpectedError(value-as-type)
    UpdateExpression?: VisitNode<S, t.UpdateExpression>,
    // $FlowExpectedError(value-as-type)
    VariableDeclarator?: VisitNode<S, t.VariableDeclarator>,
    // $FlowExpectedError(value-as-type)
    WhileStatement?: VisitNode<S, t.WhileStatement>,
    // $FlowExpectedError(value-as-type)
    WithStatement?: VisitNode<S, t.WithStatement>,
    // $FlowExpectedError(value-as-type)
    AssignmentPattern?: VisitNode<S, t.AssignmentPattern>,
    // $FlowExpectedError(value-as-type)
    ArrayPattern?: VisitNode<S, t.ArrayPattern>,
    // $FlowExpectedError(value-as-type)
    ArrowFunctionExpression?: VisitNode<S, t.ArrowFunctionExpression>,
    // $FlowExpectedError(value-as-type)
    ClassBody?: VisitNode<S, t.ClassBody>,
    // $FlowExpectedError(value-as-type)
    ClassDeclaration?: VisitNode<S, t.ClassDeclaration>,
    // $FlowExpectedError(value-as-type)
    ClassExpression?: VisitNode<S, t.ClassExpression>,
    // $FlowExpectedError(value-as-type)
    ExportAllDeclaration?: VisitNode<S, t.ExportAllDeclaration>,
    // $FlowExpectedError(value-as-type)
    ExportDefaultDeclaration?: VisitNode<S, t.ExportDefaultDeclaration>,
    // $FlowExpectedError(value-as-type)
    ExportNamedDeclaration?: VisitNode<S, t.ExportNamedDeclaration>,
    // $FlowExpectedError(value-as-type)
    Declaration?: VisitNode<S, t.Declaration>,
    // $FlowExpectedError(value-as-type)
    ExportSpecifier?: VisitNode<S, t.ExportSpecifier>,
    // $FlowExpectedError(value-as-type)
    ForOfStatement?: VisitNode<S, t.ForOfStatement>,
    // $FlowExpectedError(value-as-type)
    ImportDeclaration?: VisitNode<S, t.ImportDeclaration>,
    // $FlowExpectedError(value-as-type)
    ImportDefaultSpecifier?: VisitNode<S, t.ImportDefaultSpecifier>,
    // $FlowExpectedError(value-as-type)
    ImportNamespaceSpecifier?: VisitNode<S, t.ImportNamespaceSpecifier>,
    // $FlowExpectedError(value-as-type)
    ImportSpecifier?: VisitNode<S, t.ImportSpecifier>,
    // $FlowExpectedError(value-as-type)
    MetaProperty?: VisitNode<S, t.MetaProperty>,
    // $FlowExpectedError(value-as-type)
    ClassMethod?: VisitNode<S, t.ClassMethod>,
    // $FlowExpectedError(value-as-type)
    ObjectPattern?: VisitNode<S, t.ObjectPattern>,
    // $FlowExpectedError(value-as-type)
    SpreadElement?: VisitNode<S, t.SpreadElement>,
    // $FlowExpectedError(value-as-type)
    Super?: VisitNode<S, t.Super>,
    // $FlowExpectedError(value-as-type)
    TaggedTemplateExpression?: VisitNode<S, t.TaggedTemplateExpression>,
    // $FlowExpectedError(value-as-type)
    TemplateLiteral?: VisitNode<S, t.TemplateLiteral>,
    // $FlowExpectedError(value-as-type)
    TemplateElement?: VisitNode<S, t.TemplateElement>,
    // $FlowExpectedError(value-as-type)
    YieldExpression?: VisitNode<S, t.YieldExpression>,
    // $FlowExpectedError(value-as-type)
    AnyTypeAnnotation?: VisitNode<S, t.AnyTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    ArrayTypeAnnotation?: VisitNode<S, t.ArrayTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    BooleanTypeAnnotation?: VisitNode<S, t.BooleanTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    BooleanLiteralTypeAnnotation?: VisitNode<S, t.BooleanLiteralTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    NullLiteralTypeAnnotation?: VisitNode<S, t.NullLiteralTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    ClassImplements?: VisitNode<S, t.ClassImplements>,
    // $FlowExpectedError(value-as-type)
    ClassProperty?: VisitNode<S, t.ClassProperty>,
    // $FlowExpectedError(value-as-type)
    DeclareClass?: VisitNode<S, t.DeclareClass>,
    // $FlowExpectedError(value-as-type)
    DeclareFunction?: VisitNode<S, t.DeclareFunction>,
    // $FlowExpectedError(value-as-type)
    DeclareInterface?: VisitNode<S, t.DeclareInterface>,
    // $FlowExpectedError(value-as-type)
    DeclareModule?: VisitNode<S, t.DeclareModule>,
    // $FlowExpectedError(value-as-type)
    DeclareTypeAlias?: VisitNode<S, t.DeclareTypeAlias>,
    // $FlowExpectedError(value-as-type)
    DeclareVariable?: VisitNode<S, t.DeclareVariable>,
    // $FlowExpectedError(value-as-type)
    ExistentialTypeParam?: VisitNode<S, t.ExistentialTypeParam>,
    // $FlowExpectedError(value-as-type)
    FunctionTypeAnnotation?: VisitNode<S, t.FunctionTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    FunctionTypeParam?: VisitNode<S, t.FunctionTypeParam>,
    // $FlowExpectedError(value-as-type)
    GenericTypeAnnotation?: VisitNode<S, t.GenericTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    InterfaceExtends?: VisitNode<S, t.InterfaceExtends>,
    // $FlowExpectedError(value-as-type)
    InterfaceDeclaration?: VisitNode<S, t.InterfaceDeclaration>,
    // $FlowExpectedError(value-as-type)
    IntersectionTypeAnnotation?: VisitNode<S, t.IntersectionTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    MixedTypeAnnotation?: VisitNode<S, t.MixedTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    NullableTypeAnnotation?: VisitNode<S, t.NullableTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    NumericLiteralTypeAnnotation?: VisitNode<S, t.NumericLiteralTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    NumberTypeAnnotation?: VisitNode<S, t.NumberTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    StringLiteralTypeAnnotation?: VisitNode<S, t.StringLiteralTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    StringTypeAnnotation?: VisitNode<S, t.StringTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    ThisTypeAnnotation?: VisitNode<S, t.ThisTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    TupleTypeAnnotation?: VisitNode<S, t.TupleTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    TypeofTypeAnnotation?: VisitNode<S, t.TypeofTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    TypeAlias?: VisitNode<S, t.TypeAlias>,
    // $FlowExpectedError(value-as-type)
    TypeAnnotation?: VisitNode<S, t.TypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    TypeCastExpression?: VisitNode<S, t.TypeCastExpression>,
    // $FlowExpectedError(value-as-type)
    TypeParameterDeclaration?: VisitNode<S, t.TypeParameterDeclaration>,
    // $FlowExpectedError(value-as-type)
    TypeParameterInstantiation?: VisitNode<S, t.TypeParameterInstantiation>,
    // $FlowExpectedError(value-as-type)
    ObjectTypeAnnotation?: VisitNode<S, t.ObjectTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    ObjectTypeCallProperty?: VisitNode<S, t.ObjectTypeCallProperty>,
    // $FlowExpectedError(value-as-type)
    ObjectTypeIndexer?: VisitNode<S, t.ObjectTypeIndexer>,
    // $FlowExpectedError(value-as-type)
    ObjectTypeProperty?: VisitNode<S, t.ObjectTypeProperty>,
    // $FlowExpectedError(value-as-type)
    QualifiedTypeIdentifier?: VisitNode<S, t.QualifiedTypeIdentifier>,
    // $FlowExpectedError(value-as-type)
    UnionTypeAnnotation?: VisitNode<S, t.UnionTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    VoidTypeAnnotation?: VisitNode<S, t.VoidTypeAnnotation>,
    // $FlowExpectedError(value-as-type)
    JSXAttribute?: VisitNode<S, t.JSXAttribute>,
    // $FlowExpectedError(value-as-type)
    JSXIdentifier?: VisitNode<S, t.JSXIdentifier>,
    // $FlowExpectedError(value-as-type)
    JSXNamespacedName?: VisitNode<S, t.JSXNamespacedName>,
    // $FlowExpectedError(value-as-type)
    JSXElement?: VisitNode<S, t.JSXElement>,
    // $FlowExpectedError(value-as-type)
    JSXExpressionContainer?: VisitNode<S, t.JSXExpressionContainer>,
    // $FlowExpectedError(value-as-type)
    JSXClosingElement?: VisitNode<S, t.JSXClosingElement>,
    // $FlowExpectedError(value-as-type)
    JSXMemberExpression?: VisitNode<S, t.JSXMemberExpression>,
    // $FlowExpectedError(value-as-type)
    JSXOpeningElement?: VisitNode<S, t.JSXOpeningElement>,
    // $FlowExpectedError(value-as-type)
    JSXEmptyExpression?: VisitNode<S, t.JSXEmptyExpression>,
    // $FlowExpectedError(value-as-type)
    JSXSpreadAttribute?: VisitNode<S, t.JSXSpreadAttribute>,
    // $FlowExpectedError(value-as-type)
    JSXText?: VisitNode<S, t.JSXText>,
    // $FlowExpectedError(value-as-type)
    Noop?: VisitNode<S, t.Noop>,
    // $FlowExpectedError(value-as-type)
    ParenthesizedExpression?: VisitNode<S, t.ParenthesizedExpression>,
    // $FlowExpectedError(value-as-type)
    AwaitExpression?: VisitNode<S, t.AwaitExpression>,
    // $FlowExpectedError(value-as-type)
    BindExpression?: VisitNode<S, t.BindExpression>,
    // $FlowExpectedError(value-as-type)
    Decorator?: VisitNode<S, t.Decorator>,
    // $FlowExpectedError(value-as-type)
    DoExpression?: VisitNode<S, t.DoExpression>,
    // $FlowExpectedError(value-as-type)
    ExportDefaultSpecifier?: VisitNode<S, t.ExportDefaultSpecifier>,
    // $FlowExpectedError(value-as-type)
    ExportNamespaceSpecifier?: VisitNode<S, t.ExportNamespaceSpecifier>,
    // $FlowExpectedError(value-as-type)
    RestProperty?: VisitNode<S, t.RestProperty>,
    // $FlowExpectedError(value-as-type)
    SpreadProperty?: VisitNode<S, t.SpreadProperty>,
    // $FlowExpectedError(value-as-type)
    Binary?: VisitNode<S, t.Binary>,
    // $FlowExpectedError(value-as-type)
    Scopable?: VisitNode<S, t.Scopable>,
    // $FlowExpectedError(value-as-type)
    BlockParent?: VisitNode<S, t.BlockParent>,
    // $FlowExpectedError(value-as-type)
    Block?: VisitNode<S, t.Block>,
    // $FlowExpectedError(value-as-type)
    Terminatorless?: VisitNode<S, t.Terminatorless>,
    // $FlowExpectedError(value-as-type)
    CompletionStatement?: VisitNode<S, t.CompletionStatement>,
    // $FlowExpectedError(value-as-type)
    Conditional?: VisitNode<S, t.Conditional>,
    // $FlowExpectedError(value-as-type)
    Loop?: VisitNode<S, t.Loop>,
    // $FlowExpectedError(value-as-type)
    While?: VisitNode<S, t.While>,
    // $FlowExpectedError(value-as-type)
    ExpressionWrapper?: VisitNode<S, t.ExpressionWrapper>,
    // $FlowExpectedError(value-as-type)
    For?: VisitNode<S, t.For>,
    // $FlowExpectedError(value-as-type)
    ForXStatement?: VisitNode<S, t.ForXStatement>,
    // $FlowExpectedError(value-as-type)
    Function?: VisitNode<S, t.Function>,
    // $FlowExpectedError(value-as-type)
    FunctionParent?: VisitNode<S, t.FunctionParent>,
    // $FlowExpectedError(value-as-type)
    Pureish?: VisitNode<S, t.Pureish>,
    // $FlowExpectedError(value-as-type)
    Literal?: VisitNode<S, t.Literal>,
    // $FlowExpectedError(value-as-type)
    Immutable?: VisitNode<S, t.Immutable>,
    // $FlowExpectedError(value-as-type)
    UserWhitespacable?: VisitNode<S, t.UserWhitespacable>,
    // $FlowExpectedError(value-as-type)
    Method?: VisitNode<S, t.Method>,
    // $FlowExpectedError(value-as-type)
    ObjectMember?: VisitNode<S, t.ObjectMember>,
    // $FlowExpectedError(value-as-type)
    Property?: VisitNode<S, t.Property>,
    // $FlowExpectedError(value-as-type)
    UnaryLike?: VisitNode<S, t.UnaryLike>,
    // $FlowExpectedError(value-as-type)
    Pattern?: VisitNode<S, t.Pattern>,
    // $FlowExpectedError(value-as-type)
    Class?: VisitNode<S, t.Class>,
    // $FlowExpectedError(value-as-type)
    ModuleDeclaration?: VisitNode<S, t.ModuleDeclaration>,
    // $FlowExpectedError(value-as-type)
    ExportDeclaration?: VisitNode<S, t.ExportDeclaration>,
    // $FlowExpectedError(value-as-type)
    ModuleSpecifier?: VisitNode<S, t.ModuleSpecifier>,
    // $FlowExpectedError(value-as-type)
    Flow?: VisitNode<S, t.Flow>,
    // $FlowExpectedError(value-as-type)
    FlowBaseAnnotation?: VisitNode<S, t.FlowBaseAnnotation>,
    // $FlowExpectedError(value-as-type)
    FlowDeclaration?: VisitNode<S, t.FlowDeclaration>,
    // $FlowExpectedError(value-as-type)
    JSX?: VisitNode<S, t.JSX>,
    // $FlowExpectedError(value-as-type)
    Scope?: VisitNode<S, t.Scopable>,
  };

  declare export type VisitNode<T, P> =
    | VisitNodeFunction<T, P>
    | VisitNodeObject<T>;

  declare export type VisitNodeFunction<T, P> = (
    this: T,
    path: NodePath<P>,
    state: any
  ) => void;

  declare export type VisitNodeObject<T> = {
    +enter?: (path: NodePath<T>, state: any) => void,
    +exit?: (path: NodePath<T>, state: any) => void,
  };

  declare export class NodePath<+T: Node = Node> {
    // constructor(hub: Hub, parent: Node);
    +parent: Node;
    +hub: Hub;
    +contexts: $ReadOnlyArray<TraversalContext>;
    +data: any;
    +shouldSkip: boolean;
    +shouldStop: boolean;
    +removed: boolean;
    +state: any;
    +opts: any;
    +skipKeys: any;
    +parentPath: NodePath<>;
    +context: TraversalContext;
    +container: any | Array<any>;
    +listKey: string;
    +inList: boolean;
    +parentKey: string;
    +key: string | number;
    +node: T;
    +scope: Scope;
    +type: ?string;
    +typeAnnotation: any;

    getScope(scope: Scope): Scope;

    setData(key: string, val: any): any;

    getData(key: string, def?: any): any;

    buildCodeFrameError<TError: Error>(
      msg: string,
      Error?: Class<TError>
    ): TError;

    traverse<T>(visitor: Visitor<T>, state: T): void;

    set(key: string, node: Node): void;

    getPathLocation(): string;

    // Example: https://github.com/babel/babel/blob/63204ae51e020d84a5b246312f5eeb4d981ab952/packages/babel-traverse/src/path/modification.js#L83
    debug(buildMessage: () => string): void;

    // ------------------------- ancestry -------------------------
    /**
     * Call the provided `callback` with the `NodePath<>`s of all the parents.
     * When the `callback` returns a truthy value, we return that node path.
     */
    findParent(callback: (path: NodePath<>) => boolean): NodePath<>;

    find(callback: (path: NodePath<>) => boolean): NodePath<>;

    /** Get the parent function of the current path. */
    // $FlowExpectedError(value-as-type)
    getFunctionParent(): NodePath<t.Function>;

    /** Walk up the tree until we hit a parent node path in a list. */
    // $FlowExpectedError(value-as-type)
    getStatementParent(): NodePath<t.Statement>;

    /**
     * Get the deepest common ancestor and then from it, get the earliest relationship path
     * to that ancestor.
     *
     * Earliest is defined as being "before" all the other nodes in terms of list container
     * position and visiting key.
     */
    getEarliestCommonAncestorFrom(
      paths: NodePath<>[]
    ): $ReadOnlyArray<NodePath<>>;

    /** Get the earliest path in the tree where the provided `paths` intersect. */
    getDeepestCommonAncestorFrom(
      paths: $ReadOnlyArray<NodePath<>>,
      filter?: (
        deepest: Node,
        i: number,
        ancestries: $ReadOnlyArray<NodePath<>>
      ) => NodePath<>
    ): NodePath<>;

    /**
     * Build an array of node paths containing the entire ancestry of the current node path.
     *
     * NOTE: The current node path is included in this.
     */
    getAncestry(): $ReadOnlyArray<NodePath<>>;

    inType(...candidateTypes: $ReadOnlyArray<string>): boolean;

    // ------------------------- inference -------------------------
    /** Infer the type of the current `NodePath<>`. */
    // $FlowExpectedError(value-as-type)
    getTypeAnnotation(): t.FlowTypeAnnotation;

    isBaseType(baseName: string, soft?: boolean): boolean;

    couldBeBaseType(name: string): boolean;

    baseTypeStrictlyMatches(right: NodePath<>): boolean;

    isGenericType(genericName: string): boolean;

    // ------------------------- replacement -------------------------
    /**
     * Replace a node with an array of multiple. This method performs the following steps:
     *
     *  - Inherit the comments of first provided node with that of the current node.
     *  - Insert the provided nodes after the current node.
     *  - Remove the current node.
     */
    replaceWithMultiple(nodes: $ReadOnlyArray<Node>): void;

    /**
     * Parse a string as an expression and replace the current node with the result.
     *
     * NOTE: This is typically not a good idea to use. Building source strings when
     * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
     * easier to use, your transforms will be extremely brittle.
     */
    replaceWithSourceString(replacement: any): void;

    /** Replace the current node with another. */
    replaceWith(replacement: Node | NodePath<>): void;

    /**
     * This method takes an array of statements nodes and then explodes it
     * into expressions. This method retains completion records which is
     * extremely important to retain original semantics.
     */
    replaceExpressionWithStatements(nodes: $ReadOnlyArray<Node>): Node;

    replaceInline(nodes: Node | $ReadOnlyArray<Node>): void;

    // ------------------------- evaluation -------------------------
    /**
     * Walk the input `node` and statically evaluate if it's truthy.
     *
     * Returning `true` when we're sure that the expression will evaluate to a
     * truthy value, `false` if we're sure that it will evaluate to a falsy
     * value and `undefined` if we aren't sure. Because of this please do not
     * rely on coercion when using this method and check with === if it's false.
     */
    evaluateTruthy(): boolean;

    /**
     * Walk the input `node` and statically evaluate it.
     *
     * Returns an object in the form `{ confident, value }`. `confident` indicates
     * whether or not we had to drop out of evaluating the expression because of
     * hitting an unknown node that we couldn't confidently find the value of.
     *
     * Example:
     *
     *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
     *   t.evaluate(parse("!true")) // { confident: true, value: false }
     *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined }
     */
    evaluate(): { confident: boolean, value: any };

    // ------------------------- introspection -------------------------
    /**
     * Match the current node if it matches the provided `pattern`.
     *
     * For example, given the match `React.createClass` it would match the
     * parsed nodes of `React.createClass` and `React["createClass"]`.
     */
    matchesPattern(pattern: string, allowPartial?: boolean): boolean;

    /**
     * Check whether we have the input `key`. If the `key` references an array then we check
     * if the array has any items, otherwise we just check if it's falsy.
     */
    has(key: string): boolean;

    isStatic(): boolean;

    /** Alias of `has`. */
    is(key: string): boolean;

    /** Opposite of `has`. */
    isnt(key: string): boolean;

    /** Check whether the path node `key` strict equals `value`. */
    equals(key: string, value: any): boolean;

    /**
     * Check the type against our stored internal type of the node. This is handy when a node has
     * been removed yet we still internally know the type and need it to calculate node replacement.
     */
    isNodeType(type: string): boolean;

    /**
     * This checks whether or not we're in one of the following positions:
     *
     *   for (KEY in right);
     *   for (KEY;;);
     *
     * This is because these spots allow VariableDeclarations AND normal expressions so we need
     * to tell the path replacement that it's ok to replace this with an expression.
     */
    canHaveVariableDeclarationOrExpression(): boolean;

    /**
     * This checks whether we are swapping an arrow function's body between an
     * expression and a block statement (or vice versa).
     *
     * This is because arrow functions may implicitly return an expression, which
     * is the same as containing a block statement.
     */
    canSwapBetweenExpressionAndStatement(replacement: Node): boolean;

    /** Check whether the current path references a completion record */
    isCompletionRecord(allowInsideFunction?: boolean): boolean;

    /**
     * Check whether or not the current `key` allows either a single statement or block statement
     * so we can explode it if necessary.
     */
    isStatementOrBlock(): boolean;

    /** Check if the currently assigned path references the `importName` of `moduleSource`. */
    referencesImport(moduleSource: string, importName: string): boolean;

    /** Get the source code associated with this node. */
    getSource(): string;

    /** Check if the current path will maybe execute before another path */
    willIMaybeExecuteBefore(path: NodePath<>): boolean;

    // ------------------------- context -------------------------
    call(key: string): boolean;

    isBlacklisted(): boolean;

    visit(): boolean;

    skip(): void;

    skipKey(key: string): void;

    stop(): void;

    setScope(): void;

    setContext(context: TraversalContext): NodePath<T>;

    popContext(): void;

    pushContext(context: TraversalContext): void;

    // ------------------------- removal -------------------------
    remove(): void;

    // ------------------------- modification -------------------------
    /** Insert the provided nodes before the current one. */
    insertBefore(nodes: Node | $ReadOnlyArray<Node>): any;

    /**
     * Insert the provided nodes after the current one. When inserting nodes after an
     * expression, ensure that the completion record is correct by pushing the current node.
     */
    insertAfter(nodes: Node | $ReadOnlyArray<Node>): any;

    /** Update all sibling node paths after `fromIndex` by `incrementBy`. */
    updateSiblingKeys(fromIndex: number, incrementBy: number): void;

    /** Hoist the current node to the highest scope possible and return a UID referencing it. */
    hoist(scope: Scope): void;

    // ------------------------- family -------------------------
    getOpposite(): NodePath<>;

    getCompletionRecords(): Array<NodePath<>>;

    getSibling(key: string | number): NodePath<>;
    getNextSibling(): NodePath<>;
    getPrevSibling(): NodePath<>;
    getAllPrevSiblings(): Array<NodePath<>>;
    getAllNextSiblings(): Array<NodePath<>>;

    get<+K: $Keys<T>>(
      key: K,
      context?: boolean | TraversalContext
    ): $Call<TWrapWithNodePath, T[K]>;

    getBindingIdentifiers(duplicates?: boolean): $ReadOnlyArray<Node>;

    getOuterBindingIdentifiers(duplicates?: boolean): $ReadOnlyArray<Node>;

    // ------------------------- comments -------------------------
    /** Share comments amongst siblings. */
    shareCommentsWithSiblings(): void;

    addComment(type: string, content: string, line?: boolean): void;

    /** Give node `comments` of the specified `type`. */
    addComments(type: string, comments: $ReadOnlyArray<any>): void;

    // ------------------------- isXXX -------------------------
    isArrayExpression(opts?: mixed): boolean;
    isAssignmentExpression(opts?: mixed): boolean; // this is NodePath<t.AssignmentExpression>;
    isBinaryExpression(opts?: mixed): boolean; // this is NodePath<t.BinaryExpression>;
    isDirective(opts?: mixed): boolean; // this is NodePath<t.Directive>;
    isDirectiveLiteral(opts?: mixed): boolean; // this is NodePath<t.DirectiveLiteral>;
    isBlockStatement(opts?: mixed): boolean; // this is NodePath<t.BlockStatement>;
    isBreakStatement(opts?: mixed): boolean; // this is NodePath<t.BreakStatement>;
    isCallExpression(opts?: mixed): boolean; // this is NodePath<t.CallExpression>;
    isCatchClause(opts?: mixed): boolean; // this is NodePath<t.CatchClause>;
    isConditionalExpression(opts?: mixed): boolean; // this is NodePath<t.ConditionalExpression>;
    isContinueStatement(opts?: mixed): boolean; // this is NodePath<t.ContinueStatement>;
    isDebuggerStatement(opts?: mixed): boolean; // this is NodePath<t.DebuggerStatement>;
    isDoWhileStatement(opts?: mixed): boolean; // this is NodePath<t.DoWhileStatement>;
    isEmptyStatement(opts?: mixed): boolean; // this is NodePath<t.EmptyStatement>;
    isExpressionStatement(opts?: mixed): boolean; // this is NodePath<t.ExpressionStatement>;
    isFile(opts?: mixed): boolean; // this is NodePath<t.File>;
    isForInStatement(opts?: mixed): boolean; // this is NodePath<t.ForInStatement>;
    isForStatement(opts?: mixed): boolean; // this is NodePath<t.ForStatement>;
    isFunctionDeclaration(opts?: mixed): boolean; // this is NodePath<t.FunctionDeclaration>;
    isFunctionExpression(opts?: mixed): boolean; // this is NodePath<t.FunctionExpression>;
    isIdentifier(opts?: mixed): boolean; // this is NodePath<t.Identifier>;
    isIfStatement(opts?: mixed): boolean; // this is NodePath<t.IfStatement>;
    isLabeledStatement(opts?: mixed): boolean; // this is NodePath<t.LabeledStatement>;
    isStringLiteral(opts?: mixed): boolean; // this is NodePath<t.StringLiteral>;
    isNumericLiteral(opts?: mixed): boolean; // this is NodePath<t.NumericLiteral>;
    isNullLiteral(opts?: mixed): boolean; // this is NodePath<t.NullLiteral>;
    isBooleanLiteral(opts?: mixed): boolean; // this is NodePath<t.BooleanLiteral>;
    isRegExpLiteral(opts?: mixed): boolean; // this is NodePath<t.RegExpLiteral>;
    isLogicalExpression(opts?: mixed): boolean; // this is NodePath<t.LogicalExpression>;
    isMemberExpression(opts?: mixed): boolean; // this is NodePath<t.MemberExpression>;
    isNewExpression(opts?: mixed): boolean; // this is NodePath<t.NewExpression>;
    isProgram(opts?: mixed): boolean; // this is NodePath<t.Program>;
    isObjectExpression(opts?: mixed): boolean; // this is NodePath<t.ObjectExpression>;
    isObjectMethod(opts?: mixed): boolean; // this is NodePath<t.ObjectMethod>;
    isObjectProperty(opts?: mixed): boolean; // this is NodePath<t.ObjectProperty>;
    isRestElement(opts?: mixed): boolean; // this is NodePath<t.RestElement>;
    isReturnStatement(opts?: mixed): boolean; // this is NodePath<t.ReturnStatement>;
    isSequenceExpression(opts?: mixed): boolean; // this is NodePath<t.SequenceExpression>;
    isSwitchCase(opts?: mixed): boolean; // this is NodePath<t.SwitchCase>;
    isSwitchStatement(opts?: mixed): boolean; // this is NodePath<t.SwitchStatement>;
    isThisExpression(opts?: mixed): boolean; // this is NodePath<t.ThisExpression>;
    isThrowStatement(opts?: mixed): boolean; // this is NodePath<t.ThrowStatement>;
    isTryStatement(opts?: mixed): boolean; // this is NodePath<t.TryStatement>;
    isUnaryExpression(opts?: mixed): boolean; // this is NodePath<t.UnaryExpression>;
    isUpdateExpression(opts?: mixed): boolean; // this is NodePath<t.UpdateExpression>;
    isVariableDeclaration(opts?: mixed): boolean; // this is NodePath<t.VariableDeclaration>;
    isVariableDeclarator(opts?: mixed): boolean; // this is NodePath<t.VariableDeclarator>;
    isWhileStatement(opts?: mixed): boolean; // this is NodePath<t.WhileStatement>;
    isWithStatement(opts?: mixed): boolean; // this is NodePath<t.WithStatement>;
    isAssignmentPattern(opts?: mixed): boolean; // this is NodePath<t.AssignmentPattern>;
    isArrayPattern(opts?: mixed): boolean; // this is NodePath<t.ArrayPattern>;
    isArrowFunctionExpression(opts?: mixed): boolean; // this is NodePath<t.ArrowFunctionExpression>;
    isClassBody(opts?: mixed): boolean; // this is NodePath<t.ClassBody>;
    isClassDeclaration(opts?: mixed): boolean; // this is NodePath<t.ClassDeclaration>;
    isClassExpression(opts?: mixed): boolean; // this is NodePath<t.ClassExpression>;
    isExportAllDeclaration(opts?: mixed): boolean; // this is NodePath<t.ExportAllDeclaration>;
    isExportDefaultDeclaration(opts?: mixed): boolean; // this is NodePath<t.ExportDefaultDeclaration>;
    isExportNamedDeclaration(opts?: mixed): boolean; // this is NodePath<t.ExportNamedDeclaration>;
    isExportSpecifier(opts?: mixed): boolean; // this is NodePath<t.ExportSpecifier>;
    isForOfStatement(opts?: mixed): boolean; // this is NodePath<t.ForOfStatement>;
    isImportDeclaration(opts?: mixed): boolean; // this is NodePath<t.ImportDeclaration>;
    isImportDefaultSpecifier(opts?: mixed): boolean; // this is NodePath<t.ImportDefaultSpecifier>;
    isImportNamespaceSpecifier(opts?: mixed): boolean; // this is NodePath<t.ImportNamespaceSpecifier>;
    isImportSpecifier(opts?: mixed): boolean; // this is NodePath<t.ImportSpecifier>;
    isMetaProperty(opts?: mixed): boolean; // this is NodePath<t.MetaProperty>;
    isClassMethod(opts?: mixed): boolean; // this is NodePath<t.ClassMethod>;
    isObjectPattern(opts?: mixed): boolean; // this is NodePath<t.ObjectPattern>;
    isSpreadElement(opts?: mixed): boolean; // this is NodePath<t.SpreadElement>;
    isSuper(opts?: mixed): boolean; // this is NodePath<t.Super>;
    isTaggedTemplateExpression(opts?: mixed): boolean; // this is NodePath<t.TaggedTemplateExpression>;
    isTemplateElement(opts?: mixed): boolean; // this is NodePath<t.TemplateElement>;
    isTemplateLiteral(opts?: mixed): boolean; // this is NodePath<t.TemplateLiteral>;
    isYieldExpression(opts?: mixed): boolean; // this is NodePath<t.YieldExpression>;
    isAnyTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.AnyTypeAnnotation>;
    isArrayTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.ArrayTypeAnnotation>;
    isBooleanTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.BooleanTypeAnnotation>;
    isBooleanLiteralTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.BooleanLiteralTypeAnnotation>;
    isNullLiteralTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.NullLiteralTypeAnnotation>;
    isClassImplements(opts?: mixed): boolean; // this is NodePath<t.ClassImplements>;
    isClassProperty(opts?: mixed): boolean; // this is NodePath<t.ClassProperty>;
    isDeclareClass(opts?: mixed): boolean; // this is NodePath<t.DeclareClass>;
    isDeclareFunction(opts?: mixed): boolean; // this is NodePath<t.DeclareFunction>;
    isDeclareInterface(opts?: mixed): boolean; // this is NodePath<t.DeclareInterface>;
    isDeclareModule(opts?: mixed): boolean; // this is NodePath<t.DeclareModule>;
    isDeclareTypeAlias(opts?: mixed): boolean; // this is NodePath<t.DeclareTypeAlias>;
    isDeclareVariable(opts?: mixed): boolean; // this is NodePath<t.DeclareVariable>;
    isExistentialTypeParam(opts?: mixed): boolean; // this is NodePath<t.ExistentialTypeParam>;
    isFunctionTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.FunctionTypeAnnotation>;
    isFunctionTypeParam(opts?: mixed): boolean; // this is NodePath<t.FunctionTypeParam>;
    isGenericTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.GenericTypeAnnotation>;
    isInterfaceExtends(opts?: mixed): boolean; // this is NodePath<t.InterfaceExtends>;
    isInterfaceDeclaration(opts?: mixed): boolean; // this is NodePath<t.InterfaceDeclaration>;
    isIntersectionTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.IntersectionTypeAnnotation>;
    isMixedTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.MixedTypeAnnotation>;
    isNullableTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.NullableTypeAnnotation>;
    isNumericLiteralTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.NumericLiteralTypeAnnotation>;
    isNumberTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.NumberTypeAnnotation>;
    isStringLiteralTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.StringLiteralTypeAnnotation>;
    isStringTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.StringTypeAnnotation>;
    isThisTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.ThisTypeAnnotation>;
    isTupleTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.TupleTypeAnnotation>;
    isTypeofTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.TypeofTypeAnnotation>;
    isTypeAlias(opts?: mixed): boolean; // this is NodePath<t.TypeAlias>;
    isTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.TypeAnnotation>;
    isTypeCastExpression(opts?: mixed): boolean; // this is NodePath<t.TypeCastExpression>;
    isTypeParameterDeclaration(opts?: mixed): boolean; // this is NodePath<t.TypeParameterDeclaration>;
    isTypeParameterInstantiation(opts?: mixed): boolean; // this is NodePath<t.TypeParameterInstantiation>;
    isObjectTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.ObjectTypeAnnotation>;
    isObjectTypeCallProperty(opts?: mixed): boolean; // this is NodePath<t.ObjectTypeCallProperty>;
    isObjectTypeIndexer(opts?: mixed): boolean; // this is NodePath<t.ObjectTypeIndexer>;
    isObjectTypeProperty(opts?: mixed): boolean; // this is NodePath<t.ObjectTypeProperty>;
    isQualifiedTypeIdentifier(opts?: mixed): boolean; // this is NodePath<t.QualifiedTypeIdentifier>;
    isUnionTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.UnionTypeAnnotation>;
    isVoidTypeAnnotation(opts?: mixed): boolean; // this is NodePath<t.VoidTypeAnnotation>;
    isJSXAttribute(opts?: mixed): boolean; // this is NodePath<t.JSXAttribute>;
    isJSXClosingElement(opts?: mixed): boolean; // this is NodePath<t.JSXClosingElement>;
    isJSXElement(opts?: mixed): boolean; // this is NodePath<t.JSXElement>;
    isJSXEmptyExpression(opts?: mixed): boolean; // this is NodePath<t.JSXEmptyExpression>;
    isJSXExpressionContainer(opts?: mixed): boolean; // this is NodePath<t.JSXExpressionContainer>;
    isJSXIdentifier(opts?: mixed): boolean; // this is NodePath<t.JSXIdentifier>;
    isJSXMemberExpression(opts?: mixed): boolean; // this is NodePath<t.JSXMemberExpression>;
    isJSXNamespacedName(opts?: mixed): boolean; // this is NodePath<t.JSXNamespacedName>;
    isJSXOpeningElement(opts?: mixed): boolean; // this is NodePath<t.JSXOpeningElement>;
    isJSXSpreadAttribute(opts?: mixed): boolean; // this is NodePath<t.JSXSpreadAttribute>;
    isJSXText(opts?: mixed): boolean; // this is NodePath<t.JSXText>;
    isNoop(opts?: mixed): boolean; // this is NodePath<t.Noop>;
    isParenthesizedExpression(opts?: mixed): boolean; // this is NodePath<t.ParenthesizedExpression>;
    isAwaitExpression(opts?: mixed): boolean; // this is NodePath<t.AwaitExpression>;
    isBindExpression(opts?: mixed): boolean; // this is NodePath<t.BindExpression>;
    isDecorator(opts?: mixed): boolean; // this is NodePath<t.Decorator>;
    isDoExpression(opts?: mixed): boolean; // this is NodePath<t.DoExpression>;
    isExportDefaultSpecifier(opts?: mixed): boolean; // this is NodePath<t.ExportDefaultSpecifier>;
    isExportNamespaceSpecifier(opts?: mixed): boolean; // this is NodePath<t.ExportNamespaceSpecifier>;
    isRestProperty(opts?: mixed): boolean; // this is NodePath<t.RestProperty>;
    isSpreadProperty(opts?: mixed): boolean; // this is NodePath<t.SpreadProperty>;
    isExpression(opts?: mixed): boolean; // this is NodePath<t.Expression>;
    isBinary(opts?: mixed): boolean; // this is NodePath<t.Binary>;
    isScopable(opts?: mixed): boolean; // this is NodePath<t.Scopable>;
    isBlockParent(opts?: mixed): boolean; // this is NodePath<t.BlockParent>;
    isBlock(opts?: mixed): boolean; // this is NodePath<t.Block>;
    isStatement(opts?: mixed): boolean; // this is NodePath<t.Statement>;
    isTerminatorless(opts?: mixed): boolean; // this is NodePath<t.Terminatorless>;
    isCompletionStatement(opts?: mixed): boolean; // this is NodePath<t.CompletionStatement>;
    isConditional(opts?: mixed): boolean; // this is NodePath<t.Conditional>;
    isLoop(opts?: mixed): boolean; // this is NodePath<t.Loop>;
    isWhile(opts?: mixed): boolean; // this is NodePath<t.While>;
    isExpressionWrapper(opts?: mixed): boolean; // this is NodePath<t.ExpressionWrapper>;
    isFor(opts?: mixed): boolean; // this is NodePath<t.For>;
    isForXStatement(opts?: mixed): boolean; // this is NodePath<t.ForXStatement>;
    isFunction(opts?: mixed): boolean; // this is NodePath<t.Function>;
    isFunctionParent(opts?: mixed): boolean; // this is NodePath<t.FunctionParent>;
    isPureish(opts?: mixed): boolean; // this is NodePath<t.Pureish>;
    isDeclaration(opts?: mixed): boolean; // this is NodePath<t.Declaration>;
    isLVal(opts?: mixed): boolean; // this is NodePath<t.LVal>;
    isLiteral(opts?: mixed): boolean; // this is NodePath<t.Literal>;
    isImmutable(opts?: mixed): boolean; // this is NodePath<t.Immutable>;
    isUserWhitespacable(opts?: mixed): boolean; // this is NodePath<t.UserWhitespacable>;
    isMethod(opts?: mixed): boolean; // this is NodePath<t.Method>;
    isObjectMember(opts?: mixed): boolean; // this is NodePath<t.ObjectMember>;
    isProperty(opts?: mixed): boolean; // this is NodePath<t.Property>;
    isUnaryLike(opts?: mixed): boolean; // this is NodePath<t.UnaryLike>;
    isPattern(opts?: mixed): boolean; // this is NodePath<t.Pattern>;
    isClass(opts?: mixed): boolean; // this is NodePath<t.Class>;
    isModuleDeclaration(opts?: mixed): boolean; // this is NodePath<t.ModuleDeclaration>;
    isExportDeclaration(opts?: mixed): boolean; // this is NodePath<t.ExportDeclaration>;
    isModuleSpecifier(opts?: mixed): boolean; // this is NodePath<t.ModuleSpecifier>;
    isFlow(opts?: mixed): boolean; // this is NodePath<t.Flow>;
    isFlowBaseAnnotation(opts?: mixed): boolean; // this is NodePath<t.FlowBaseAnnotation>;
    isFlowDeclaration(opts?: mixed): boolean; // this is NodePath<t.FlowDeclaration>;
    isJSX(opts?: mixed): boolean; // this is NodePath<t.JSX>;
    isNumberLiteral(opts?: mixed): boolean; // this is NodePath<t.NumericLiteral>;
    isRegexLiteral(opts?: mixed): boolean; // this is NodePath<t.RegExpLiteral>;
    isReferencedIdentifier(opts?: mixed): boolean; // this is NodePath<t.Identifier | t.JSXIdentifier>;
    isReferencedMemberExpression(opts?: mixed): boolean; // this is NodePath<t.MemberExpression>;
    isBindingIdentifier(opts?: mixed): boolean; // this is NodePath<t.Identifier>;
    isScope(opts?: mixed): boolean; // this is NodePath<t.Scopable>;
    isReferenced(opts?: mixed): boolean;
    isBlockScoped(opts?: mixed): boolean; // this is NodePath<t.FunctionDeclaration | t.ClassDeclaration | t.VariableDeclaration>;
    isVar(opts?: mixed): boolean; // this is NodePath<t.VariableDeclaration>;
    isUser(opts?: mixed): boolean;
    isGenerated(opts?: mixed): boolean;
    isPure(opts?: mixed): boolean;

    // ------------------------- assertXXX -------------------------
    assertArrayExpression(opts?: mixed): void;
    assertAssignmentExpression(opts?: mixed): void;
    assertBinaryExpression(opts?: mixed): void;
    assertDirective(opts?: mixed): void;
    assertDirectiveLiteral(opts?: mixed): void;
    assertBlockStatement(opts?: mixed): void;
    assertBreakStatement(opts?: mixed): void;
    assertCallExpression(opts?: mixed): void;
    assertCatchClause(opts?: mixed): void;
    assertConditionalExpression(opts?: mixed): void;
    assertContinueStatement(opts?: mixed): void;
    assertDebuggerStatement(opts?: mixed): void;
    assertDoWhileStatement(opts?: mixed): void;
    assertEmptyStatement(opts?: mixed): void;
    assertExpressionStatement(opts?: mixed): void;
    assertFile(opts?: mixed): void;
    assertForInStatement(opts?: mixed): void;
    assertForStatement(opts?: mixed): void;
    assertFunctionDeclaration(opts?: mixed): void;
    assertFunctionExpression(opts?: mixed): void;
    assertIdentifier(opts?: mixed): void;
    assertIfStatement(opts?: mixed): void;
    assertLabeledStatement(opts?: mixed): void;
    assertStringLiteral(opts?: mixed): void;
    assertNumericLiteral(opts?: mixed): void;
    assertNullLiteral(opts?: mixed): void;
    assertBooleanLiteral(opts?: mixed): void;
    assertRegExpLiteral(opts?: mixed): void;
    assertLogicalExpression(opts?: mixed): void;
    assertMemberExpression(opts?: mixed): void;
    assertNewExpression(opts?: mixed): void;
    assertProgram(opts?: mixed): void;
    assertObjectExpression(opts?: mixed): void;
    assertObjectMethod(opts?: mixed): void;
    assertObjectProperty(opts?: mixed): void;
    assertRestElement(opts?: mixed): void;
    assertReturnStatement(opts?: mixed): void;
    assertSequenceExpression(opts?: mixed): void;
    assertSwitchCase(opts?: mixed): void;
    assertSwitchStatement(opts?: mixed): void;
    assertThisExpression(opts?: mixed): void;
    assertThrowStatement(opts?: mixed): void;
    assertTryStatement(opts?: mixed): void;
    assertUnaryExpression(opts?: mixed): void;
    assertUpdateExpression(opts?: mixed): void;
    assertVariableDeclaration(opts?: mixed): void;
    assertVariableDeclarator(opts?: mixed): void;
    assertWhileStatement(opts?: mixed): void;
    assertWithStatement(opts?: mixed): void;
    assertAssignmentPattern(opts?: mixed): void;
    assertArrayPattern(opts?: mixed): void;
    assertArrowFunctionExpression(opts?: mixed): void;
    assertClassBody(opts?: mixed): void;
    assertClassDeclaration(opts?: mixed): void;
    assertClassExpression(opts?: mixed): void;
    assertExportAllDeclaration(opts?: mixed): void;
    assertExportDefaultDeclaration(opts?: mixed): void;
    assertExportNamedDeclaration(opts?: mixed): void;
    assertExportSpecifier(opts?: mixed): void;
    assertForOfStatement(opts?: mixed): void;
    assertImportDeclaration(opts?: mixed): void;
    assertImportDefaultSpecifier(opts?: mixed): void;
    assertImportNamespaceSpecifier(opts?: mixed): void;
    assertImportSpecifier(opts?: mixed): void;
    assertMetaProperty(opts?: mixed): void;
    assertClassMethod(opts?: mixed): void;
    assertObjectPattern(opts?: mixed): void;
    assertSpreadElement(opts?: mixed): void;
    assertSuper(opts?: mixed): void;
    assertTaggedTemplateExpression(opts?: mixed): void;
    assertTemplateElement(opts?: mixed): void;
    assertTemplateLiteral(opts?: mixed): void;
    assertYieldExpression(opts?: mixed): void;
    assertAnyTypeAnnotation(opts?: mixed): void;
    assertArrayTypeAnnotation(opts?: mixed): void;
    assertBooleanTypeAnnotation(opts?: mixed): void;
    assertBooleanLiteralTypeAnnotation(opts?: mixed): void;
    assertNullLiteralTypeAnnotation(opts?: mixed): void;
    assertClassImplements(opts?: mixed): void;
    assertClassProperty(opts?: mixed): void;
    assertDeclareClass(opts?: mixed): void;
    assertDeclareFunction(opts?: mixed): void;
    assertDeclareInterface(opts?: mixed): void;
    assertDeclareModule(opts?: mixed): void;
    assertDeclareTypeAlias(opts?: mixed): void;
    assertDeclareVariable(opts?: mixed): void;
    assertExistentialTypeParam(opts?: mixed): void;
    assertFunctionTypeAnnotation(opts?: mixed): void;
    assertFunctionTypeParam(opts?: mixed): void;
    assertGenericTypeAnnotation(opts?: mixed): void;
    assertInterfaceExtends(opts?: mixed): void;
    assertInterfaceDeclaration(opts?: mixed): void;
    assertIntersectionTypeAnnotation(opts?: mixed): void;
    assertMixedTypeAnnotation(opts?: mixed): void;
    assertNullableTypeAnnotation(opts?: mixed): void;
    assertNumericLiteralTypeAnnotation(opts?: mixed): void;
    assertNumberTypeAnnotation(opts?: mixed): void;
    assertStringLiteralTypeAnnotation(opts?: mixed): void;
    assertStringTypeAnnotation(opts?: mixed): void;
    assertThisTypeAnnotation(opts?: mixed): void;
    assertTupleTypeAnnotation(opts?: mixed): void;
    assertTypeofTypeAnnotation(opts?: mixed): void;
    assertTypeAlias(opts?: mixed): void;
    assertTypeAnnotation(opts?: mixed): void;
    assertTypeCastExpression(opts?: mixed): void;
    assertTypeParameterDeclaration(opts?: mixed): void;
    assertTypeParameterInstantiation(opts?: mixed): void;
    assertObjectTypeAnnotation(opts?: mixed): void;
    assertObjectTypeCallProperty(opts?: mixed): void;
    assertObjectTypeIndexer(opts?: mixed): void;
    assertObjectTypeProperty(opts?: mixed): void;
    assertQualifiedTypeIdentifier(opts?: mixed): void;
    assertUnionTypeAnnotation(opts?: mixed): void;
    assertVoidTypeAnnotation(opts?: mixed): void;
    assertJSXAttribute(opts?: mixed): void;
    assertJSXClosingElement(opts?: mixed): void;
    assertJSXElement(opts?: mixed): void;
    assertJSXEmptyExpression(opts?: mixed): void;
    assertJSXExpressionContainer(opts?: mixed): void;
    assertJSXIdentifier(opts?: mixed): void;
    assertJSXMemberExpression(opts?: mixed): void;
    assertJSXNamespacedName(opts?: mixed): void;
    assertJSXOpeningElement(opts?: mixed): void;
    assertJSXSpreadAttribute(opts?: mixed): void;
    assertJSXText(opts?: mixed): void;
    assertNoop(opts?: mixed): void;
    assertParenthesizedExpression(opts?: mixed): void;
    assertAwaitExpression(opts?: mixed): void;
    assertBindExpression(opts?: mixed): void;
    assertDecorator(opts?: mixed): void;
    assertDoExpression(opts?: mixed): void;
    assertExportDefaultSpecifier(opts?: mixed): void;
    assertExportNamespaceSpecifier(opts?: mixed): void;
    assertRestProperty(opts?: mixed): void;
    assertSpreadProperty(opts?: mixed): void;
    assertExpression(opts?: mixed): void;
    assertBinary(opts?: mixed): void;
    assertScopable(opts?: mixed): void;
    assertBlockParent(opts?: mixed): void;
    assertBlock(opts?: mixed): void;
    assertStatement(opts?: mixed): void;
    assertTerminatorless(opts?: mixed): void;
    assertCompletionStatement(opts?: mixed): void;
    assertConditional(opts?: mixed): void;
    assertLoop(opts?: mixed): void;
    assertWhile(opts?: mixed): void;
    assertExpressionWrapper(opts?: mixed): void;
    assertFor(opts?: mixed): void;
    assertForXStatement(opts?: mixed): void;
    assertFunction(opts?: mixed): void;
    assertFunctionParent(opts?: mixed): void;
    assertPureish(opts?: mixed): void;
    assertDeclaration(opts?: mixed): void;
    assertLVal(opts?: mixed): void;
    assertLiteral(opts?: mixed): void;
    assertImmutable(opts?: mixed): void;
    assertUserWhitespacable(opts?: mixed): void;
    assertMethod(opts?: mixed): void;
    assertObjectMember(opts?: mixed): void;
    assertProperty(opts?: mixed): void;
    assertUnaryLike(opts?: mixed): void;
    assertPattern(opts?: mixed): void;
    assertClass(opts?: mixed): void;
    assertModuleDeclaration(opts?: mixed): void;
    assertExportDeclaration(opts?: mixed): void;
    assertModuleSpecifier(opts?: mixed): void;
    assertFlow(opts?: mixed): void;
    assertFlowBaseAnnotation(opts?: mixed): void;
    assertFlowDeclaration(opts?: mixed): void;
    assertJSX(opts?: mixed): void;
    assertNumberLiteral(opts?: mixed): void;
    assertRegexLiteral(opts?: mixed): void;
  }

  declare export class Hub {
    constructor(file: any, options: any): this;
    file: any;
    options: any;
  }

  declare export interface TraversalContext {
    parentPath: NodePath<>;
    scope: Scope;
    state: any;
    opts: any;
  }
  // declare module.exports: <S>(
  //   parent: Node | Node[],
  //   opts: TraverseOptions<S>,
  //   scope: Scope,
  //   state: S,
  //   parentPath?: NodePath,
  // ) => void;
}
