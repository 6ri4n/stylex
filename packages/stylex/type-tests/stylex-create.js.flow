// @flow strict

import stylex from '../src/stylex';
import type {
  StaticStyles,
  StyleXStyles,
  XStyle,
  // StaticStylesWithout,
  // StyleXStylesWithout,
  StyleXClassNameFor,
  StyleXClassName,
  CompiledStyles,
  InlineStyles,
  StyleXVar,
} from '../src/StyleXTypes';

/* eslint-disable no-unused-vars */

/**
 * EMPTY STYLES
 */
const styles1: $ReadOnly<{ foo: $ReadOnly<{ $$css: true }> }> = stylex.create({
  foo: {},
});
(styles1.foo: StaticStyles<>);
(styles1.foo: StaticStyles<{}>);
(styles1.foo: StaticStyles<{ width?: number | string }>);
// (styles1.foo: StaticStylesWithout<{ width: mixed }>);
(styles1.foo: StaticStyles<{ width?: mixed }>);
(styles1.foo: StyleXStyles<>);
(styles1.foo: StyleXStyles<{}>);
// (styles1.foo: StyleXStylesWithout<{ width: mixed }>);
(styles1.foo: StyleXStyles<{ width?: number | string }>);
(styles1.foo: StyleXStyles<{ width?: mixed }>);

(styles1.foo: XStyle<>);
(styles1.foo: XStyle<{ width?: StyleXClassNameFor<'width', number | string> }>);
(styles1.foo: XStyle<{ width?: StyleXClassNameFor<'width', mixed> }>);
(styles1.foo: XStyle<{ width?: StyleXClassName }>);

stylex(styles1.foo);
stylex.spread([styles1.foo]);

/**
 * SIMPLE STYLES
 */
const styles2: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%'>,
  }>,
}> = stylex.create({
  foo: {
    width: '100%',
  },
});
(styles2.foo: StaticStyles<>);
(styles2.foo: StaticStyles<{ width: '100%' }>);
// (styles2.foo: StaticStylesWithout<{ width: '100%' }>);
(styles2.foo: StaticStyles<{ width: number | string }>);
(styles2.foo: StaticStyles<{ width?: mixed, height?: string }>);
(styles2.foo: StyleXStyles<>);
(styles2.foo: StyleXStyles<{ width: '100%' }>);
(styles2.foo: StyleXStyles<{ width: number | string }>);
(styles2.foo: StyleXStyles<{ width?: mixed }>);

(styles2.foo: XStyle<>);
(styles2.foo: XStyle<{ width: StyleXClassNameFor<'width', '100%'> }>);
(styles2.foo: XStyle<{ width: StyleXClassNameFor<'width', number | string> }>);
(styles2.foo: XStyle<{ width?: StyleXClassNameFor<'width', mixed> }>);
(styles2.foo: XStyle<{ width?: StyleXClassNameFor<string, mixed> }>);
(styles2.foo: XStyle<{ width?: StyleXClassName }>);

stylex(styles2.foo);
stylex.spread([styles2.foo]);

/**
 * FALLBACK STYLES
 */
const styles3: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%' | '200%'>,
  }>,
}> = stylex.create({
  foo: {
    width: stylex.firstThatWorks('100%', '200%'),
  },
});
(styles3.foo: StaticStyles<>);
(styles3.foo: StaticStyles<{ width: '100%' | '200%' }>);
(styles3.foo: StaticStyles<{ width: number | string }>);
(styles3.foo: StyleXStyles<>);
(styles3.foo: StyleXStyles<{ width: '100%' | '200%' }>);
(styles3.foo: StyleXStyles<{ width: number | string }>);
(styles3.foo: StyleXStyles<{ width?: mixed }>);

(styles3.foo: XStyle<>);
// $FlowExpectedError[incompatible-cast] - value can be '100%' or '200%'.
(styles3.foo: XStyle<{ width: StyleXClassNameFor<'width', '100%'> }>);
(styles3.foo: XStyle<{ width: StyleXClassNameFor<'width', '100%' | '200%'> }>);
(styles3.foo: XStyle<{ width: StyleXClassNameFor<'width', number | string> }>);
(styles3.foo: XStyle<{ width?: StyleXClassNameFor<'width', mixed> }>);

stylex(styles3.foo);
stylex.spread([styles3.foo]);

/**
 * CONDITIONAL STYLES
 */
const styles4: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%' | '100dvw'>,
  }>,
}> = stylex.create({
  foo: {
    width: {
      default: '100%',
      '@supports (width: 100dvw)': '100dvw',
    },
  },
});
(styles4.foo: StaticStyles<>);
(styles4.foo: StaticStyles<{ width: '100%' | '100dvw' }>);
(styles4.foo: StaticStyles<{ width: number | string }>);
(styles4.foo: StyleXStyles<>);
(styles4.foo: StyleXStyles<{ width: '100%' | '100dvw' }>);
(styles4.foo: StyleXStyles<{ width: number | string }>);
(styles4.foo: StyleXStyles<{ width?: mixed }>);

stylex(styles4.foo);
stylex.spread([styles4.foo]);

/**
 * NESTED CONDITIONAL STYLES
 */
const styles5: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%' | '100dvw' | '200%'>,
  }>,
}> = stylex.create({
  foo: {
    width: {
      default: '100%',
      '@supports (width: 100dvw)': {
        default: '100dvw',
        '@media (max-width: 1000px)': '200%',
      },
    },
  },
});
(styles5.foo: StaticStyles<>);
(styles5.foo: StaticStyles<{ width: '100%' | '100dvw' | '200%' }>);
(styles5.foo: StaticStyles<{ width: number | string }>);
(styles5.foo: StyleXStyles<>);
(styles5.foo: StyleXStyles<{ width: '100%' | '100dvw' | '200%' }>);
(styles5.foo: StyleXStyles<{ width: number | string }>);
(styles5.foo: StyleXStyles<{ width?: mixed }>);

stylex(styles5.foo);
stylex.spread([styles5.foo]);

/**
 * DYNAMIC NESTED CONDITIONAL STYLES
 */
const styles6: $ReadOnly<{
  foo: (number) => $ReadOnly<
    [
      $ReadOnly<{
        $$css: true,
        width: StyleXClassNameFor<'width', '100%' | '100dvw' | number>,
      }>,
      InlineStyles,
    ],
  >,
}> = stylex.create({
  foo: (mobile: number) => ({
    width: {
      default: '100%',
      '@supports (width: 100dvw)': {
        default: '100dvw',
        '@media (max-width: 1000px)': mobile,
      },
    },
  }),
});
// $FlowExpectedError[incompatible-cast] - Functions don't return static styles.
(styles6.foo(100): StaticStyles<>);
// $FlowExpectedError[incompatible-cast] - Functions don't return static styles.
(styles6.foo(100): StaticStyles<{ width: '100%' | '100dvw' | number }>);
// $FlowExpectedError[incompatible-cast] - Functions don't return static styles.
(styles6.foo(100): StaticStyles<{ width: number | string }>);
// Functions return StyleXStyles!
(styles6.foo(100): StyleXStyles<>);
(styles6.foo(100): StyleXStyles<{ width: '100%' | '100dvw' | number }>);
(styles6.foo(100): StyleXStyles<{ width: number | string }>);
(styles6.foo(100): StyleXStyles<{ width?: mixed }>);

(styles6.foo(100)[0]: CompiledStyles);
(styles6.foo(100)[1]: InlineStyles);
(styles6.foo(100): $ReadOnly<[CompiledStyles, InlineStyles]>);

// $FlowExpectedError[incompatible-call] - `stylex()` can't handle dynamic styles.
stylex(styles6.foo(100));
stylex(styles6.foo(100)[0]);
stylex.spread(styles6.foo(100));

/**
 * PSEUDO-ELEMENT STYLES
 */
const styles7: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    '::before': StyleXClassNameFor<
      '::before',
      $ReadOnly<{
        width: '100%',
      }>,
    >,
  }>,
}> = stylex.create({
  foo: {
    '::before': { width: '100%' },
  },
});
(styles7.foo: StaticStyles<>);
(styles7.foo: StaticStyles<{ '::before': { width: '100%' } }>);
(styles7.foo: StaticStyles<{
  '::before': { width: number | string, height?: mixed },
}>);
(styles7.foo: StyleXStyles<>);
(styles7.foo: StyleXStyles<{ '::before': { width: '100%' } }>);
(styles7.foo: StyleXStyles<{
  '::before': { width: number | string, height?: mixed },
}>);

stylex(styles7.foo);
stylex.spread([styles7.foo]);

const vars = stylex.defineVars({
  accent: 'red',
});

(vars.accent: StyleXVar<'red'>);

const styles8: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    color: StyleXClassNameFor<'color', 'red'>,
  }>,
}> = stylex.create({
  foo: {
    color: vars.accent,
  },
});

(styles8.foo: StaticStyles<>);
// $FlowExpectedError[incompatible-cast] - We want to disallow extra keys
(styles8.foo: StaticStyles<{}>);
(styles8.foo: StaticStyles<{ color: 'red' }>);
(styles8.foo: StaticStyles<{ color: mixed }>);
// (styles8.foo: StaticStylesWithout<{ height: mixed }>);
// - @ts-expect-error - The style does have `width`
// (styles8.foo: StaticStylesWithout<{ color: mixed }>);
// $FlowExpectedError[incompatible-cast] - 'number' is not assignable to 'red'.
(styles8.foo: StaticStyles<{ color: 100 }>);
// $FlowExpectedError[incompatible-cast] - 'blue' is not assignable to 'red'.
(styles8.foo: StaticStyles<{ color: 'blue' }>);
(styles8.foo: StaticStyles<{ color: number | string }>);
(styles8.foo: StaticStyles<{ color?: mixed, height?: string }>);
(styles8.foo: StyleXStyles<>);
// $FlowExpectedError[incompatible-cast] - We want to disallow extra keys
(styles8.foo: StyleXStyles<{}>);
(styles8.foo: StyleXStyles<{ color: 'red' }>);
(styles8.foo: StyleXStyles<{ color: number | string }>);
(styles8.foo: StyleXStyles<{ color?: mixed }>);
// (styles8.foo: StyleXStylesWithout<{ height: unknown }>);
// - @ts-expect-error - The style does have `color`
// (styles8.foo: StyleXStylesWithout<{ color: unknown }>);

stylex(styles8.foo);
stylex.spread(styles8.foo);
